<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-<%= LIQUIBASE_DTD_VERSION %>.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <%_ const isAutoIncrementDB = reactive || prodDatabaseType === 'mysql'; _%>
    <!--
        Added the entity <%= entity.entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-1" author="jhipster">
        <createTable tableName="<%= entity.entityTableName %>"<%- formatAsLiquibaseRemarks(entity.javadoc, true) %>>
            <%_ for (idx in fields) {
                if (!fields[idx].derivedId) {
                    const nullable = fields[idx].nullable;
                    const fieldType = fields[idx].fieldType;
                    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                    const columnName = fields[idx].fieldNameAsDatabaseColumn;
                    const columnType = fields[idx].columnType;
                _%>
            <column name="<%= columnName %>" type="<%= columnType %>"<% if (isAutoIncrementDB && fields[idx].autoGenerated) { %> autoIncrement="true"<% } %><%- formatAsLiquibaseRemarks(fields[idx].javadoc, true) %>>
                <constraints nullable="<%= nullable %>"<% if (fields[idx].id) { %> primaryKey="true"<% } %><% if (fields[idx].unique) { %> unique="true" uniqueConstraintName="<%= fields[idx].uniqueConstraintName %>"<% } %> />
            </column>
                    <%_ if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                        let contentTypeColumnType = columnType;
                        contentTypeColumnType = "varchar(255)"; _%>
            <column name="<%= columnName %>_content_type" type="<%= contentTypeColumnType %>">
                <constraints nullable="<%= nullable %>" />
            </column>
                    <%_ }
                }
            } _%>
            <%_
            for (idx in relationships) {
                let nullable_relation = true,
                relationshipType = relationships[idx].relationshipType,
                relationshipName = relationships[idx].relationshipName;
                relationships[idx].otherEntity.primaryKey.references.forEach(pk => {
                    nullable_relation = !(relationships[idx].relationshipRequired);
                    columnAttributes = `name="${getColumnName(relationships[idx].relationshipName)}_${pk.columnName}" type="${pk.field.columnType}"`;
            _%>
                    <%_ if (relationships[idx].relationshipType === 'many-to-one') { _%>
            <column <%- columnAttributes %>>
                <constraints nullable="<%= nullable_relation %>"<% if (relationships[idx].id) { %> primaryKey="true"<% } %> />
            </column>
                    <%_ } else if (relationshipType === 'one-to-one' && relationships[idx].ownerSide === true) {
                        if (relationships[idx].id && relationships[idx].relationshipType === 'one-to-one') { _%>
            <column <%- columnAttributes %>>
                <constraints nullable="false" primaryKey="true" />
            </column>
                        <%_ } else {
                            const uniqueConstraintName = getUXConstraintName(entity.entityTableName, relationships[idx].columnName + '_id', entity.prodDatabaseType); _%>
            <column <%- columnAttributes %>>
                <constraints unique="true" nullable="<%= nullable_relation %>" uniqueConstraintName="<%= uniqueConstraintName %>" />
            </column>
                        <%_ }
                    } _%>
                <%_ });
            } _%>
            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here -->
        </createTable>
        <%_ for (const idx in fields) {
            if (fields[idx].shouldDropDefaultValue) { _%>
        <dropDefaultValue tableName="<%= entity.entityTableName %>" columnName="<%= fields[idx].columnName %>" columnDataType="${datetimeType}"/>
        <%_ }
        } _%>
    </changeSet>

    <changeSet id="<%= changelogDate %>-1-relations" author="jhipster">
        <%_ for (idx in relationships) {
            const relationshipType = relationships[idx].relationshipType,
            relationshipName = relationships[idx].relationshipName,
            ownerSide = relationships[idx].ownerSide,
            otherEntityName = relationships[idx].otherEntityName;
            const relationshipColumnType = relationships[idx].otherEntity.primaryKey.type === 'String' ? 'varchar(100)' : 'bigint';
            if (relationshipType === 'many-to-many' && ownerSide) {
                const joinTableName = getJoinTableName(entity.entityTableName, relationshipName, prodDatabaseType);
          _%>

        <createTable tableName="<%= joinTableName %>">
            <%_ const manyToManyColumns = [];
            relationships[idx].otherEntity.primaryKey.references.forEach(pk => manyToManyColumns.push({
                name: `${getColumnName(relationships[idx].relationshipName)}_${pk.columnName}`,
                type: pk.field.columnType,
            }));
            entity.primaryKey.references.forEach(pk => manyToManyColumns.push({
                name: `${getColumnName(entity.name)}_${pk.columnName}`,
                type: pk.field.columnType,
            }));
            manyToManyColumns.forEach(c => { _%>
                <column name="<%= c.name %>" type="<%= c.type %>">
                    <constraints nullable="false"/>
                </column>
            <%_ }) _%>
        </createTable>

        <addPrimaryKey columnNames="<%= manyToManyColumns.map(c => c.name).join(', ') %>" tableName="<%= joinTableName %>"/>
        <% } %><% } %>
    </changeSet>
    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here -->
    <%_ if (!skipFakeData) { _%>

    <!--
        Load sample data generated with Faker.js
        - This data can be easily edited using a CSV editor (or even MS Excel) and
          is located in the 'src/main/resources/config/liquibase/fake-data' directory
        - By default this data is applied when running with the JHipster 'dev' profile.
          This can be customized by adding or removing 'faker' in the 'spring.liquibase.contexts'
          Spring Boot configuration key.
    -->
    <changeSet id="<%= changelogDate %>-1-data" author="jhipster" context="faker">
        <loadData
                  file="config/liquibase/fake-data/<%= !entity.incrementalChangelog ? entity.entityTableName : databaseChangelog.changelogDate + '_entity_' + entity.entityClass %>.csv"
                  separator=";"
                  tableName="<%= entity.entityTableName %>">
            <%_ for (idx in fields) {
                if (!fields[idx].derivedId) {
                _%>
            <column name="<%= fields[idx].columnName %>" type="<%= fields[idx].loadColumnType %>"/>
                <%_ if (fields[idx].fieldType === 'byte[]' && fields[idx].fieldTypeBlobContent !== 'text') { _%>
            <column name="<%= fields[idx].columnName %>_content_type" type="string"/>
                <%_ } _%>
                <%_ }
            }_%>
            <%_ for (idx in relationships) {
                if (((relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired) || relationships[idx].id) &&
                    (relationships[idx].relationshipType === "many-to-one" || (relationships[idx].relationshipType === "one-to-one" && relationships[idx].ownerSide === true))
                ) {
                        relationships[idx].otherEntity.primaryKey.references.forEach(pk => {
                        _%>
            <column name="<%= `${getColumnName(relationships[idx].relationshipName)}_${pk.columnName}` %>" type="<%= pk.field.loadColumnType %>"/>
                        <%_ }) _%>
                    <%_ } _%>
            <%_  } _%>
            <!-- jhipster-needle-liquibase-add-loadcolumn - JHipster (and/or extensions) can add load columns here -->
        </loadData>
    </changeSet>
    <%_ } _%>

</databaseChangeLog>
